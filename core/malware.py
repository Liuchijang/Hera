class Malware:
    def __init__(self, process=None, files=None, registry=None, network=None, dll=None, wmi=None):
        self.process = process if process is not None else []
        self.files = files if files is not None else []
        self.registry = registry if registry is not None else []
        self.network = network if network is not None else []
        self.dll = dll if dll is not None else []
        self.wmi = wmi if wmi is not None else []

    def add_process(self, process_name):
        self.process.append(process_name)

    def add_file(self, proc,file_name):
        self.files.append({proc: file_name})

    def add_registry_entry(self, proc, entry):
        self.registry.append({proc: entry})

    def add_network_activity(self, proc, connection):
        self.network.append({proc: connection})

    def add_dll(self, proc, dll):
        self.dll.append({proc: dll})
    
    def add_wmi(self, wmiConsumer):
        self.wmi.append(wmiConsumer)
    
    def display(self, verbose=False):
        output = ""  # Khởi tạo chuỗi output để tích lũy nội dung

        print_wmi_count = False 

        def display_attribute(key, prefix):
            nonlocal output  # Sử dụng biến output từ phạm vi bên ngoài
            if len(self.files) > 0:
                count_create = 0
                count_inject = 0
                count_detect = 0
                count_contain = 0
                for i in self.files:
                    if key in i:
                        if i[key][1] == "created": count_create += 1
                        if i[key][1] == "injected": count_inject += 1
                        if i[key][1] == "detected": count_detect += 1
                        if i[key][1] == "contained": count_contain += 1
                if count_create > 0:
                    for i in self.files:
                        if key in i:
                            output += prefix + '│   - ' + "Created files:\n"
                            break
                    for i in self.files:
                        if key in i and i[key][1] == "created":
                            output += prefix + '│   - ' + f"{i[key][0]}\n"
                if count_inject > 0:
                    for i in self.files:
                        if key in i:
                            output += prefix + '│   - ' + "Injected files:\n"
                            break
                    for i in self.files:
                        if key in i and i[key][1] == "injected":
                            output += prefix + '│   - ' + f"{i[key][0]}\n"
                if count_detect > 0:
                    for i in self.files:
                        if key in i:
                            output += prefix + '│   - ' + "Detected suspicious files:\n"
                            break
                    for i in self.files:
                        if key in i and i[key][1] == "detected":
                            output += prefix + '│   - ' + f"{i[key][0]}\n"
                if count_contain > 0:
                    for i in self.files:
                        if key in i:
                            output += prefix + '│   - ' + "Suspicious similar filename:\n"
                            break
                    for i in self.files:
                        if key in i and i[key][1] == "contained":
                            output += prefix + '│   - ' + f"{i[key][0]}\n"
            if len(self.registry) > 0:
                for i in self.registry:
                    if key in i:
                        output += prefix + '│   - ' + "Registry:\n"
                        break
                for i in self.registry:
                    if key in i:
                        output += prefix + '│   - ' + f"Path: {i[key][0]} | Value: {i[key][1]}\n"
            if len(self.network) > 0:
                for i in self.network:
                    if key in i:
                        output += prefix + '│   - ' + "Suspicious Network connections:\n"
                        break
                for i in self.network:
                    if key in i:
                        output += prefix + '│   - ' + f"Source IP: {i[key]['SrcIP']} | Source Port: {i[key]['SrcPort']} | Destination IP: {i[key]['DestIP']} | Destination Port: {i[key]['DestPort']}\n"
            if len(self.dll) > 0:
                count = 0
                for i in self.dll:
                    if key in i and i[key][1] == 1:
                        count += 1
                if count > 0:
                    for i in self.dll:
                        if key in i and i[key][1] == 1:
                            output += prefix + '│   - ' + "Detected DLL:\n"
                            break
                    for i in self.dll:
                        if key in i and i[key][1] == 1:
                            output += prefix + '│   - ' + f"{i[key][0]}\n"
                if verbose:
                    for i in self.dll:
                        if key in i and i[key][1] == 0:
                            output += prefix + '│   - ' + "Loaded DLL:\n"
                            break
                    for i in self.dll:
                        if key in i and i[key][1] == 0:
                            output += prefix + '│   - ' + f"{i[key][0]}\n"

        output += "=" * 100 + "\n"

        if len(self.process) == 0:
            return output  # Trả về chuỗi output nếu không có quá trình nào để hiển thị

        prefix = ""
        for count, key in enumerate(self.process):
            level = self.process[key][1]
            cmd = self.process[key][0]
            name = key[1] 
            last_pid = next(iter([k[0] for k in self.process if self.process[k][1] == level][::-1]))    
            if count > 0 and self.process[list(self.process.keys())[count - 1]][1] == level:
                pass
            else:
                prefix = prefix+ '   '
            if key[0] == last_pid:
                output += prefix + '└── ' + f"{key[0]} - {name} - {cmd}\n"
                display_attribute(key=key, prefix=prefix)
                if level == 0:
                    prefix = prefix + '│'
            elif count == len(self.process) - 1:
                output += prefix + '└── ' + f"{key[0]} - {cmd}\n"
                display_attribute(key, prefix)
            else:
                output += prefix + '├── ' + f"{key[0]} - {cmd}\n"
                display_attribute(key, prefix)
        if len(self.wmi) > 0 and print_wmi_count == False:
            output += '   │   - ' + "WMI consumer(s):\n"
            for i in self.wmi:
                output += '   │   - ' + f"Consumer name: {i[0]} | Arguments: {i[1]}\n"
            print_wmi_count = True
        print(output)
        return output  # Trả về chuỗi output
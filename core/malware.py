class Malware:
    def __init__(self, process=None, files=None, registry=None, network=None, dll=None,wmi=None):
        self.process = process if process is not None else []
        self.files = files if files is not None else []
        self.registry = registry if registry is not None else []
        self.network = network if network is not None else []
        self.dll = dll if dll is not None else []
        self.wmi = wmi if wmi is not None else []

    def add_process(self, process_name):
        self.process.append(process_name)

    def add_file(self, file_name):
        self.files.append(file_name)

    def add_registry_entry(self, entry):
        self.registry.append(entry)

    def add_network_activity(self, proc, connection):
        self.network.append({proc: connection})

    def add_dll(self, proc, dll):
        self.dll.append({proc: dll})

    def add_wmi(self, wmiConsumer):
        self.wmi.append(wmiConsumer)
    
    def display(self, verbose=False):
        print_wmi_count = False        
        def display_attribute(key, prefix):
            # print(prefix + '│   -' + f"{self.files[key]}")
            # print(prefix + '│   -' + f"{self.registry[key]}")
            
            if len(self.network) > 0:
                print(prefix + '│   - ' + "Network connections:")
                for i in self.network:
                    if key in i:
                        print(prefix + '│   - ' + f"Source IP: {i[key]['SrcIP']} | Source Port: {i[key]['SrcPort']} | Destination IP: {i[key]['DestIP']} | Destination Port: {i[key]['DestPort']}")
            if len(self.dll) > 0:
                count = 0
                for i in self.dll:
                    if key in i and i[key][1] == 1:
                        count += 1
                if count > 0:
                    print(prefix + '│   - ' + "Detected DLL:")
                    for i in self.dll:
                        if key in i and i[key][1] == 1:
                            print(prefix + '│   - ' + f"{i[key][0]}")
                if verbose:
                    print(prefix + '│   - ' + "Loaded DLL:")
                    for i in self.dll:
                        if key in i and i[key][1] == 0:
                            print(prefix + '│   - ' + f"{i[key][0]}")
        print("=" * 100)
        if len(self.process) == 0:
            return
        prefix = ""
        for count, key in enumerate(self.process):
            level = self.process[key][1]
            cmd = self.process[key][0]
            name = key[1] 
            # Lấy pid của phần tử cuối cùng trong cấp độ hiện tại
            last_pid = next(iter([k[0] for k in self.process if self.process[k][1] == level][::-1]))    
            # Kiểm tra nếu level của quá trình hiện tại bằng với level của quá trình trước đó
            if count > 0 and self.process[list(self.process.keys())[count - 1]][1] == level:
                # Giữ nguyên prefix nếu cùng một cấp độ
                pass
            else:
                # Cập nhật prefix cho mỗi cấp độ mới
                prefix = prefix+ '   '
            # In ra thông tin của quá trình với khoảng trắng phụ thuộc vào cấp độ
            if key[0] == last_pid:
                print(prefix + '└── ' + f"{key[0]} - {name}")

                display_attribute(key=key, prefix=prefix)
                if level == 0:
                    prefix = prefix + '│'
            elif count == len(self.process) - 1:
                print(prefix + '└── ' + f"{key[0]} - {cmd}")
                display_attribute(key, prefix)
            else:
                print(prefix + '├── ' + f"{key[0]} - {cmd}")
                display_attribute(key, prefix)
        if len(self.wmi) > 0 and print_wmi_count == False:
            print('   │   - ' + "WMI consumer(s):")
            for i in self.wmi:
                print('   │   - ' + f"Consumer name: {i[0]} | Arguments: {i[1]}")
            print_wmi_count = True
                


